[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

# bark bark
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''play_sound('tarot2', math.random()*0.1 + 0.55, 0.09)'''
position = "before"
payload = '''
if self.hover_sound and not self.hide_ability then
	play_sound(self.hover_sound(), 1.26, 0.12);
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''tag_sprite.stop_hover = function(_self) _self.hovering = false; Node.stop_hover(_self); _self.hover_tilt = 0 end'''
position = "after"
payload = '''
tag_sprite.click = function(_self)
		if G.GAME.USING_POINTER then
			local t = G.P_TAGS[self.key]
			if not t.no_doe and not t.hidden and not t.no_pointer then
				add_tag(self)
				G.FUNCS.exit_overlay_menu_code()
				if G.GAME.CODE_DESTROY_CARD then
					G.GAME.CODE_DESTROY_CARD:start_dissolve()
					G.GAME.CODE_DESTROY_CARD = nil
				end
			end
		end
        if (self.key == 'tag_entr_dog' or G.P_TAGS[self.key].level_func or self.key=='tag_cry_cat') and self.HUD_tag then
		for i = 1, #G.GAME.tags do
			local other_cat = G.GAME.tags[i]
			if other_cat and other_cat.key == self.key and other_cat ~= self then
				if (other_cat.ability.level or 1) == (self.ability.level or 1) and SMODS.calculate_context({tags_merged = true, first_tag = self, other_tag = other_cat}).remove then
					other_cat:remove()
					self:remove()
				else
					if not self.ability.level then self.ability.level = 1 end
					if not other_cat.ability.level then other_cat.ability.level = 1 end	-- setting ability just doesn't seem to be working... so you get this
					if (self.ability.level == other_cat.ability.level) and (other_cat ~= self) and not cry_too_fast_kitty then
						cry_too_fast_kitty = true
						local perc = (other_cat.ability.level + 1)/10
						if perc > 1 then perc = 1 end

						local edition = G.P_CENTER_POOLS.Edition[1]
						local j = 1
						while j < other_cat.ability.level + 1 do
							for i = 2, #G.P_CENTER_POOLS.Edition do
								j = j + 1
								if j >= other_cat.ability.level + 1 then
									edition = G.P_TAGS[other_cat.key].get_edition and G.P_TAGS[other_cat.key].get_edition(other_cat) or G.P_CENTER_POOLS.Edition[i]
									break
								end
							end
						end

						G.E_MANAGER:add_event(Event({
							delay = 0.0,
							trigger = 'immediate',
							func = (function()
								attention_text({
									text = ""..other_cat.ability.level,
									colour = G.C.WHITE,
									scale = 1,
									hold = 0.3/G.SETTINGS.GAMESPEED,
									cover = other_cat.HUD_tag,
									cover_colour = G.C.DARK_EDITION,
									align = 'cm',
								})
								play_sound('generic1', 0.8 + perc/2, 0.6)
								play_sound('multhit1', 0.9 + perc/2, 0.4)
								return true
							end)
						}))
						G.E_MANAGER:add_event(Event({
							delay = 0.0,
							trigger = 'immediate',
							func = (function()
								attention_text({
									text = "-",
									colour = G.C.WHITE,
									scale = 1,
									hold = 0.3/G.SETTINGS.GAMESPEED,
									cover = self.HUD_tag,
									cover_colour = G.C.RED,
									align = 'cm',
								})
								return true
							end)
						}))
						G.E_MANAGER:add_event(Event({
							func = (function()
								self.HUD_tag.states.visible = false
								return true
							end)
						}))
						G.E_MANAGER:add_event(Event({		-- i have no idea what this does but i'm not messing with it
							func = func
						}))

						if G.P_TAGS[other_cat.key].level_func then
							other_cat.ability.level = G.P_TAGS[other_cat.key].level_func(other_cat.ability.level, 1,other_cat)
						else
							other_cat.ability.level = other_cat.ability.level + 1
						end
						
						if self.ability.shiny then
							if not Cryptid.shinytagdata[self.key] then
								Cryptid.shinytagdata[self.key] = true
								Cryptid.save()
							end
						end

						G.E_MANAGER:add_event(Event({
							trigger = 'after',
							delay = 0.7,
							func = (function()
								other_cat:juice_up(0.25, 0.1)
								other_cat.ability.edshader = edition.shader
								play_sound(edition.sound.sound, (edition.sound.per or 1)*1.3, (edition.sound.vol or 0.25)*0.6)
								self:remove()
								cry_too_fast_kitty = nil
								return true
							end)
						}))
						break
					end
				end
			end
		end
	end
end
'''
match_indent = true
