[manifest]
version = "1.2"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """    local badges = {}"""
position = "after"
payload = """
            loc_vars = loc_vars or {}
            -- if (self.is_null or SMODS.has_enhancement(self, "m_akyrs_scoreless")) and loc_vars then
            --     loc_vars.nominal_chips = nil
            -- end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """    if self.ability.name == 'The Wheel of Fortune' or self.ability.name == 'Ectoplasm' or self.ability.name == 'Hex' then"""
position = "before"
payload = """
if self.ability.name == 'The Wheel of Fortune' then
    if next(SMODS.find_card("j_akyrs_tsunagite")) then
        SMODS.calculate_effect({
            message = localize("k_akyrs_tsunagi_absurd_wheel_nope")
        },self)
        return
    end
end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """            text = localize{type='variable',key='a_xchips'..(amt<0 and '_minus' or ''),vars={math.abs(amt)}}"""
position = "at"
payload = """            text = Talisman and localize{type='variable',key='a_xchips'..(to_big(amt)<to_big(0) and '_minus' or ''),vars={math.abs(amt)}} or localize{type='variable',key='a_xchips'..(amt<0 and '_minus' or ''),vars={math.abs(amt)}}"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """            G.STATE = G.STATES.HAND_PLAYED"""
position = "before"
payload = """SMODS.calculate_context({akyrs_pre_play = true, akyrs_pre_play_cards = G.hand.highlighted})
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = """              G.STATE = G.STATES.SHOP"""
position = "before"
payload = """
if G.GAME.akyrs_always_skip_shops then
    G.STATE = G.STATES.BLIND_SELECT
else
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = """   G.STATE = G.STATES.SHOP"""
position = "after"
payload = """end"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = """        self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling"""
position = "after"
payload = """self.chips = AKYRS.mod_blind_requirement(self,self.chips)"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """    if not initial and delay_sprites ~= "quantum" and G.GAME.blind then G.GAME.blind:debuff_card(self) end"""
position = "before"
payload = """if G.GAME.blind and G.GAME.blind.debuff_card then"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """    if not initial and delay_sprites ~= "quantum" and G.GAME.blind then G.GAME.blind:debuff_card(self) end"""
position = "after"
payload = """end"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        hand_chips = mod_chips(G.GAME.hands[text].chips)"""
position = "after"
payload = """AKYRS.base_cm_mod(G.play.cards, {text,disp_text,poker_hands,scoring_hand,non_loc_disp_text}, hand_chips, mult, already_ran)"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        check_for_unlock({type = 'hand', handname = text, disp_text = non_loc_disp_text, scoring_hand = scoring_hand, full_hand = G.play.cards})"""
position = "after"
payload = """local already_ran = true"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """        perma_h_dollars = self.ability and self.ability.perma_h_dollars or 0,"""
position = "after"
payload = """akyrs_perma_score = self.ability and self.ability.akyrs_perma_score or 0,
akyrs_perma_h_score = self.ability and self.ability.akyrs_perma_h_score or 0,
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """                    bonus_x_chips = self.ability.perma_x_chips ~= 0 and (self.ability.perma_x_chips + 1) or nil,"""
position = "after"
payload = """akyrs_perma_score = self.ability.akyrs_perma_score ~= 0 and (self.ability.akyrs_perma_score) or nil,
akyrs_perma_h_score = self.ability.akyrs_perma_h_score ~= 0 and (self.ability.akyrs_perma_h_score) or nil,
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = """    if specific_vars and specific_vars.bonus_h_dollars then
        localize{type = 'other', key = 'card_extra_h_dollars', nodes = desc_nodes, vars = {SMODS.signed_dollars(specific_vars.bonus_h_dollars)}}
    end"""
position = "after"
payload = """
if specific_vars and specific_vars.akyrs_perma_score then
    localize{type = 'other', key = 'akyrs_perma_score', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.akyrs_perma_score)}}
end
if specific_vars and specific_vars.akyrs_perma_h_score then
    localize{type = 'other', key = 'akyrs_perma_h_score', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.akyrs_perma_h_score)}}
end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = """            if specific_vars and specific_vars.bonus_h_dollars then
                localize{type = 'other', key = 'card_extra_h_dollars', nodes = desc_nodes, vars = {SMODS.signed_dollars(specific_vars.bonus_h_dollars)}}
            end"""
position = "after"
payload = """
if specific_vars and specific_vars.akyrs_perma_score then
    localize{type = 'other', key = 'akyrs_perma_score', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.akyrs_perma_score)}}
end
if specific_vars and specific_vars.akyrs_perma_h_score then
    localize{type = 'other', key = 'akyrs_perma_h_score', nodes = desc_nodes, vars = {SMODS.signed(specific_vars.akyrs_perma_h_score)}}
end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """        -- TARGET: main scoring on played cards"""
position = "before"
payload = """

local akyrs_score = card:akyrs_get_perma_score()
if akyrs_score ~= 0 then
    ret.playing_card.akyrs_score = akyrs_score
end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """        -- TARGET: main scoring on held cards"""
position = "before"
payload = """
local akyrs_h_score = card:akyrs_get_perma_h_score()
if akyrs_h_score ~= 0 then
    ret.playing_card.akyrs_h_score = akyrs_h_score
end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """        if extra.edition then """
position = "before"
payload = """
if extra.akyrs_no_sound then
    sound = nil
end
"""
overwrite = true
match_indent = true




[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """            SMODS.calculate_context({end_of_round = true, game_over = game_over, beat_boss = G.GAME.blind.boss })"""
position = "after"
payload = """
AKYRS.copper_eval_calculation = true
SMODS.calculate_context({akyrs_copper_end_of_round = true, game_over = game_over, beat_boss = G.GAME.blind.boss })
AKYRS.simple_event_add(function() AKYRS.copper_eval_calculation = nil return true end, 0)"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = """    local eff, triggered = individual.object:calculate(context)"""
position = "before"
payload = """
if not individual or not individual.object then SMODS.pop_from_context_stack(context, "utils.lua : SMODS.eval_individual") return ret, post_trig end
"""
overwrite = true
match_indent = true

