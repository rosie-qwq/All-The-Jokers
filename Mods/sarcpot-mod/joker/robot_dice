SMODS.Joker {

	discovered = true,
	key = 'robot_dice',



	config = { extra = {previous_play = 0,current_jackpot = 21, mult = 0, mult_mod = 2,  n = 1, d = 6,} },
	loc_vars = function(self, info_queue, card)
		local n, d = SMODS.get_probability_vars(card, card.ability.extra.n,  card.ability.extra.d, 'robot_dice')
		return { vars = {

		n,
		d,
		card.ability.extra.current_jackpot,
		card.ability.extra.mult,
		card.ability.extra.mult_mod,
		} }
	end,
	rarity = 2,
	atlas = 'sarcpot_atlas',
	pos = { x = 2, y = 2 },
	cost = 6,
	
	calculate = function(self, card, context)
		if context.before and context.scoring_hand and not context.blueprint then
			local is_jackpot = false
			local total_rank = calc_jackpot(context.full_hand,card.ability.extra.current_jackpot)
			
			card.ability.extra.previous_play = total_rank
			if card.ability.extra.previous_play == card.ability.extra.current_jackpot then
				is_jackpot = true
			end
			if is_jackpot then			
				 if SMODS.pseudorandom_probability(card, 'robot_dice', card.ability.extra.n, card.ability.extra.d, 'robot_dice') then
					card.ability.extra.mult = card.ability.extra.mult + (card.ability.extra.mult_mod*6)
					return{
						message = localize('sarc_lucky6')
					}
				else
				card.ability.extra.mult = card.ability.extra.mult + card.ability.extra.mult_mod
				end
				
		end
	end
	if context.joker_main then
		return{
			mult = card.ability.extra.mult,
		}
	end
	if context.after then
		card.ability.extra.current_jackpot = math.random(10,40)
		return{
			message = card.ability.extra.current_jackpot..'!'
		}
	end
end


}

--Blatantly stolen from Unstable
function calc_jackpot(hand, jackpot)
	
	local aceCount = 0
	local rank = 0
	
	for i = 1, #hand do
		local currentCard = hand[i]
		if not (currentCard.config.center == G.P_CENTERS.m_stone or currentCard.config.center.no_rank) and not currentCard.debuff  then
			
			if currentCard.base.value ~= 'Ace' then
				rank = rank + (SMODS.Ranks[currentCard.base.value].nominal or 0) --Supports modded ranks as well, just in case
			else
				aceCount = aceCount + 1
				
				rank = rank + 11
			end
			
		end
	end
	
	--Handle Ace rank
	while( aceCount > 0 )
	do
	   
		if rank > jackpot then
			rank = rank - 10
		end
		
		aceCount = aceCount - 1
	end
	
	return rank
	
end