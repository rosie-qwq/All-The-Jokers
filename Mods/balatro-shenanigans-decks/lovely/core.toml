[manifest]
version = "1.0.0"
dump_lua = true
priority = 99999999

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''_pool[#_pool + 1] = v.key
                _pool_size = _pool_size + 1
            else
                _pool[#_pool + 1] = 'UNAVAILABLE'
            end
            end'''
position = "after"
payload = '''
if G.GAME.starting_params.showmandeck then
    if pseudorandom('showmandeck', 1, 6) == 1 then
        new_pool = {}

        for r = 1, #_pool do
            for q = 1, #G.jokers.cards do
                if _pool[r] == G.jokers.cards[q].config.center.key then
                    new_pool[#new_pool + 1] = G.jokers.cards[q].config.center.key
                end
            end
            for q = 1, #G.consumeables do
                if _pool[r] == G.consumeables[q].config.center.key then
                    new_pool[#new_pool + 1] = G.consumeables[q].config.center.key
                end
            end
        end

        if #new_pool > 0 then
            _pool = new_pool
            _pool_size = #new_pool
        end
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''pack_cards[i] = card'''
position = "at"
payload = '''if G.GAME.starting_params.showmansleeve and showmanned then
    pack_cards[i+1] = card -- this is so hacky lmao
else
    pack_cards[i] = card
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''            G.E_MANAGER:add_event(Event({trigger = 'after', delay = 1.3*math.sqrt(G.SETTINGS.GAMESPEED), blockable = false, blocking = false, func = function()
                local _size = self.ability.extra'''
position = "after"
payload = '''
local showmanned = false
if G.GAME.starting_params.showmansleeve then
    local mappings = {{"Arcana", "Tarot"},
     {"Celestial", "Planet"},
    {"Spectral", "Spectral"},
    {"Buffoon", "Joker"}}
    local found_mapping = nil
    local f_key = nil
    for y = 1, #mappings do
        if self.ability.name:find(mappings[y][1]) then
            found_mapping = mappings[y]
            local options = {}
            for q = 1, #G.jokers.cards do
                if G.jokers.cards[q].ability.set == mappings[y][2] then
                    table.insert(options, G.jokers.cards[q].config.center.key)
                end
            end
            for q = 1, #G.consumeables do
                if G.consumeables[q].ability.set == mappings[y][2] then
                    table.insert(options, G.consumeables[q].config.center.key)
                end
            end
            if #options > 0 then
                f_key = pseudorandom_element(options, pseudoseed('showmansleeve'))
                local card = create_card(found_mapping[2], G.pack_cards, nil, nil, true, true, f_key, 'showman_sleeve')
                card.T.x = self.T.x
                card.T.y = self.T.y
                card:start_materialize({G.C.WHITE, G.C.WHITE}, nil, 1.5*G.SETTINGS.GAMESPEED)
                pack_cards[#pack_cards+1] = card
                _size = _size - 1
                showmanned = true
            end
        end
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''calculate_reroll_cost(final_free)'''
position = "after"
payload = '''
if G.GAME.starting_params.snakeskinsleeve then
    play_sound('coin2')
    play_sound('other1')
    local new_shop_card = create_card_for_shop(G.shop_jokers)
    G.shop_jokers:emplace(new_shop_card)
    new_shop_card:juice_up()
    G.shop_jokers.T.w = math.min(#G.shop_jokers.cards*1.02*G.CARD_W,4.08*G.CARD_W)
    G.shop:recalculate()
    return true
end
'''
match_indent = true