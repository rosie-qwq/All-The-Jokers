[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

# this is shamelessly ripped from cryptid off by one
# Booster Tag effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.ability.choose or self.config.center.config.choose or 1"
position = "after"
payload = '''
G.GAME.pack_choices = ((self.ability.choose and self.ability.extra) and math.min(math.floor(self.ability.extra), self.ability.choose)) or 1
if G.GAME.modifiers.cry_misprint_min then
    G.GAME.pack_size = self.ability.extra
    if G.GAME.pack_size < 1 then G.GAME.pack_size = 1 end
    self.ability.extra = G.GAME.pack_size
    G.GAME.pack_choices = math.min(math.floor(G.GAME.pack_size), self.ability.choose)
    --G.GAME.pack_choices = math.min(math.floor(G.GAME.pack_size),cry_format(G.GAME.pack_choices * Cryptid.log_random(pseudoseed('cry_misprint_p'..G.GAME.round_resets.ante),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2f"))
end
if G.GAME.cry_oboe then
    self.ability.extra = self.ability.extra + G.GAME.cry_oboe
    G.GAME.pack_choices = G.GAME.pack_choices + G.GAME.cry_oboe
    G.GAME.cry_oboe = nil
end
if G.GAME.boostertag and G.GAME.boostertag > 0 then
    self.ability.extra = self.ability.extra * 2
    G.GAME.pack_choices = G.GAME.pack_choices * 2
    G.GAME.boostertag = math.max(0, G.GAME.boostertag - 1)
end
self.ability.extra = math.min(self.ability.extra, 1000)
G.GAME.pack_choices = math.min(G.GAME.pack_choices, 1000)
G.GAME.pack_size = self.ability.extra
'''
match_indent = true
