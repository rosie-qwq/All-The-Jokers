[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# disable small blind
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '{n=G.UIT.R, config={align = "cm", colour = mix_colours(G.C.BLACK, G.C.L_BLACK, 0.5), r = 0.1, outline = 1, outline_colour = G.C.L_BLACK}, nodes={'
position = "before"
match_indent = true
payload = """(G.GAME.modifiers.second_boss and G.GAME.round_resets.blind_states.Big ~= 'Hide' and G.GAME.round_resets.blind_states.Small ~= 'Hide') and {n=G.UIT.R, config={align = 'cm', colour = mix_colours(G.C.BLACK, G.C.L_BLACK, 0.5), r = 0.1, outline = 1, outline_colour = G.C.L_BLACK}, nodes={  
      {n=G.UIT.R, config={align = 'cm', padding = 0.2}, nodes={
          not run_info and {n=G.UIT.R, config={id = 'select_blind_button', align = 'cm', ref_table = blind_choice.config, colour = disabled and G.C.UI.BACKGROUND_INACTIVE or G.C.ORANGE, minh = 0.6, minw = 2.7, padding = 0.07, r = 0.1, shadow = true, hover = true, one_press = true, button = 'select_blind'}, nodes={
            {n=G.UIT.T, config={ref_table = G.GAME.round_resets.loc_blind_states, ref_value = type, scale = 0.45, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.UI.TEXT_LIGHT, shadow = not disabled}}
          }} or 
          {n=G.UIT.R, config={id = 'select_blind_button', align = 'cm', ref_table = blind_choice.config, colour = run_info_colour, minh = 0.6, minw = 2.2, padding = 0.07, r = 0.1, emboss = 0.08}, nodes={
            {n=G.UIT.T, config={text = localize(blind_state, 'blind_states'), scale = 0.45, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
          }}
        }},
        {n=G.UIT.R, config={id = 'blind_name',align = 'cm', padding = 0.07}, nodes={
          {n=G.UIT.R, config={align = 'cm', r = 0.1, outline = 1, outline_colour = blind_col, colour = darken(blind_col, 0.3), minw = 2.4, emboss = 0.1, padding = 0.07, line_emboss = 1}, nodes={
            {n=G.UIT.O, config={object = DynaText({string = loc_name, colours = {disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE}, shadow = not disabled, float = not disabled, y_offset = -4, scale = 0.45, maxw =2.8})}},
          }},
        }},
        {n=G.UIT.R, config={align = 'cm', padding = 0.05}, nodes={
          {n=G.UIT.R, config={id = 'blind_desc', align = 'cm', padding = 0.05}, nodes={
            {n=G.UIT.R, config={align = 'cm'}, nodes={
              {n=G.UIT.R, config={align = 'cm', minh = 1.5}, nodes={
                {n=G.UIT.O, config={object = blind_choice.animation}},
              }},
              text_table[1] and {n=G.UIT.R, config={align = 'cm', minh = 0.7, padding = 0.05, minw = 2.9}, nodes={
                text_table[1] and {n=G.UIT.R, config={align = 'cm', maxw = 2.8}, nodes={
                  {n=G.UIT.T, config={id = blind_choice.config.key, ref_table = {val = ''}, ref_value = 'val', scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled, func = 'HUD_blind_debuff_prefix'}},
                  {n=G.UIT.T, config={text = text_table[1] or '-', scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
                }} or nil,
                text_table[2] and {n=G.UIT.R, config={align = 'cm', maxw = 2.8}, nodes={
                  {n=G.UIT.T, config={text = text_table[2] or '-', scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
                }} or nil,
              }} or nil,
            }},
            {n=G.UIT.R, config={align = 'cm',r = 0.1, padding = 0.05, minw = 2.1, colour = G.C.BLACK, emboss = 0.05}, nodes={
              {n=G.UIT.R, config={align = 'cm', maxw = 3}, nodes={
                {n=G.UIT.T, config={text = localize('ph_blind_score_at_least'), scale = 0.3, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
              }},
              {n=G.UIT.R, config={align = 'cm', minh = 0.6}, nodes={
                {n=G.UIT.O, config={w=0.3,h=0.3, colour = G.C.BLUE, object = stake_sprite, hover = true, can_collide = false}},
                {n=G.UIT.B, config={h=0.1,w=0.1}},
                {n=G.UIT.T, config={text = number_format(blind_amt), scale = score_number_scale(0.6, blind_amt), colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.RED, shadow =  not disabled}}
              }},
              _reward and {n=G.UIT.R, config={align = 'cm'}, nodes={
                {n=G.UIT.T, config={text = localize('ph_blind_reward'), scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}},
                {n=G.UIT.T, config={text = string.rep(localize('$'), blind_choice.config.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
              }} or nil,
            }},
          }},
        }},
      }} or"""

# disable small blind
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.blind_select.alignment.offset.y = 0.8-(G.hand.T.y - G.jokers.T.y) + G.blind_select.T.h"
position = "before"
match_indent = true
payload = "end"

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.blind_select = UIBox{"
position = "before"
match_indent = true
payload = """if (G.GAME.modifiers.second_boss and G.GAME.round_resets.blind_states.Big ~= 'Hide' and G.GAME.round_resets.blind_states.Small ~= 'Hide') then
    G.blind_select = UIBox{
        definition = create_UIBox_blind_select(),
        config = {align='bmi', offset = {x=1,y=G.ROOM.T.y + 29},major = G.hand, bond = 'Weak'}
    }
else"""

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.blind_select.alignment.offset.x = 0"
position = "at"
match_indent = true
payload = "G.blind_select.alignment.offset.x = (G.GAME.modifiers.second_boss and G.GAME.round_resets.blind_states.Big ~= 'Hide' and G.GAME.round_resets.blind_states.Small ~= 'Hide') and 1 or 0"

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling"
position = "at"
match_indent = true
payload = "self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling*((G.GAME.modifiers.second_boss and self.name == G.P_BLINDS[G.GAME.round_resets.blind_choices.Boss].name) and 1.5 or (G.GAME.round_resets.blind_choices.ChDp_Boss and (G.GAME.modifiers.chdp_third_boss and self.name == G.P_BLINDS[G.GAME.round_resets.blind_choices.ChDp_Boss].name)) and 1.25 or 1)"

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling"
position = "at"
match_indent = true
payload = "local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling*((G.GAME.modifiers.second_boss and blind_choice.config.name == G.P_BLINDS[G.GAME.round_resets.blind_choices.Boss].name) and 1.5 or (G.GAME.round_resets.blind_choices.ChDp_Boss and (G.GAME.modifiers.chdp_third_boss and blind_choice.config.name == G.P_BLINDS[G.GAME.round_resets.blind_choices.ChDp_Boss].name)) and 1.25 or 1)"

