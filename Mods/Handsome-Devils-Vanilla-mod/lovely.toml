[manifest]
version = "1.0.0"
priority = 0

# -----------------------------------
# Green Seal
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
for i=1, hand_space do --draw cards from deckL
'''
position = "before"
payload = '''
hand_space = hand_space + G.GAME.green_seal_draws
G.GAME.green_seal_draws = 0
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
-- TARGET: main end_of_round evaluation
'''
position = "after"
payload = '''
G.GAME.green_seal_draws = 0
'''
match_indent = true
times = 1

# -----------------------------------
# Black Seal
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before = true})
'''
position = "before"
payload = '''
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, hnds_pre_before = true})
'''
match_indent = true
times = 1

# -----------------------------------
# Head of Medusa
# -----------------------------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    self.children.front:draw_shader('dissolve')
end
'''
position = "at"
payload = '''
    self.children.front:draw_shader('dissolve')
elseif self.ability.effect == 'Stone Card' and self.hnds_petrifying then
    self.children.front:draw_shader('dissolve')
end
'''
match_indent = true
times = 1

# -----------------------------------
# Stone Ocean
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
-- TARGET: main scoring on played cards
'''
position = "after"
payload = '''

if card.ability.name == "Stone Card" then
    G.GAME.ante_stones_scored = G.GAME.ante_stones_scored + 1
    G.GAME.hands['hnds_stone_ocean'].l_chips = G.GAME.hands['hnds_stone_ocean'].l_chips_base + (G.GAME.hands['hnds_stone_ocean'].l_chips_scaling * G.GAME.ante_stones_scored)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
check_and_set_high_score('furthest_ante', G.GAME.round_resets.ante)
'''
position = "after"
payload = '''
G.GAME.ante_stones_scored = 0
G.GAME.hands['hnds_stone_ocean'].l_chips = G.GAME.hands['hnds_stone_ocean'].l_chips_base
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
elseif _c.set == 'Planet' then
        loc_vars = {
            G.GAME.hands[cfg.hand_type].level,localize(cfg.hand_type, 'poker_hands'), G.GAME.hands[cfg.hand_type].l_mult, G.GAME.hands[cfg.hand_type].l_chips,
            colours = {(G.GAME.hands[cfg.hand_type].level==1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[cfg.hand_type].level)])}
        }
'''
position = "at"
payload = '''
elseif _c.set == 'Planet' then
    if _c.key == "c_hnds_makemake" then
        loc_vars = {
            G.GAME.hands[cfg.hand_type].level,localize(cfg.hand_type, 'poker_hands'), G.GAME.hands[cfg.hand_type].l_mult, G.GAME.hands[cfg.hand_type].l_chips,
            G.GAME.ante_stones_scored, G.GAME.hands[cfg.hand_type].l_chips_scaling,
            colours = {(G.GAME.hands[cfg.hand_type].level==1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[cfg.hand_type].level)])}
        }
    else
        loc_vars = {
            G.GAME.hands[cfg.hand_type].level,localize(cfg.hand_type, 'poker_hands'), G.GAME.hands[cfg.hand_type].l_mult, G.GAME.hands[cfg.hand_type].l_chips,
            colours = {(G.GAME.hands[cfg.hand_type].level==1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, G.GAME.hands[cfg.hand_type].level)])}
        }
    end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].level - 1), 1)
    G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)
'''
position = "at"
payload = '''
G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].level - 1), 1)
if hand == "hnds_stone_ocean" then
    G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].chips + G.GAME.hands[hand].l_chips*amount, 0)
else
    G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS.c_base)
'''
position = "after"
payload = '''
if v.enhancement then
    card:set_ability(G.P_CENTERS[v.enhancement])
end
'''
match_indent = true
times = 1