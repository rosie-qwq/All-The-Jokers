[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Witch effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card.T.x = self.T.x"
position = "before"
payload = """
if next(SMODS.find_card('j_mxfj_witch')) and not self.ability.name:find('Arcana') and not (G.GAME.used_vouchers.v_telescope and i == 1) then
    if pseudorandom('witch') > 0.75 then
        card:remove()
        card = nil
        card = create_card("Tarot", G.pack_cards, nil, nil, true, true, nil, 'wch')
    end
end
"""
match_indent = true

# Add "SELECT" button on Tarot cards with "Witch" outside of Arcana packs
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''function G.UIDEF.use_and_sell_buttons(card)'''
position = "after"
payload = '''
    if next(SMODS.find_card('j_mxfj_witch')) and (card.area == G.pack_cards and G.pack_cards) and card.ability.consumeable and card.ability.set == "Tarot" then
        if G.STATE == G.STATES.SMODS_BOOSTER_OPENED and (SMODS.OPENED_BOOSTER and SMODS.OPENED_BOOSTER.config.center.kind ~= 'Arcana') and not (G.hand and G.hand.cards[1]) then
            return {
                n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
                  {n=G.UIT.R, config={ref_table = card, r = 0.08, padding = 0.1, align = "bm", minw = 0.5*card.T.w - 0.15, maxw = 0.9*card.T.w - 0.15, minh = 0.3*card.T.h, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_pick_card'}, nodes={
                    {n=G.UIT.T, config={text = localize('b_select'),colour = G.C.UI.TEXT_LIGHT, scale = 0.45, shadow = true}}
                  }},
              }}
        end
    end
'''
match_indent = true

# Hide "USE" button and add "SELECT" button on Tarot cards with "Witch" outside of Arcana packs
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if (card.area == G.jokers and G.jokers or card.area == G.consumeables and G.consumeables) and G.STATE ~= G.STATES.TUTORIAL then --Add a sell button"
position = "before"
payload = '''
if next(SMODS.find_card('j_mxfj_witch')) and (card.area == G.pack_cards and G.pack_cards) and card.ability.consumeable and card.ability.set == "Tarot" then
    if G.STATE == G.STATES.SMODS_BOOSTER_OPENED and (SMODS.OPENED_BOOSTER and SMODS.OPENED_BOOSTER.config.center.kind ~= 'Arcana') and not (G.hand and G.hand.cards[1]) then
        base_attach.children.use = G.UIDEF.card_focus_button{
            card = card, parent = base_attach, type = 'select',
            func = 'can_pick_card', button = 'select_card', card_width = card_width
        }
    end
end
'''
match_indent = true

# Context mxfj_post_hand_space
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
position = 'before'
pattern = '''
for i=1, hand_space do --draw cards from deckL
'''
payload = '''
SMODS.calculate_context({mxfj_post_hand_space = true})
'''

# Pod tooltip when transformed
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if _c.set == 'Other' then"
position = "before"
payload = '''
if _c.set == "Joker" and card and card.config.center.key ~= "j_mxfj_pod" and card.ability and card.ability.mxfj_is_pod then info_queue[#info_queue+1] = G.P_CENTERS.j_mxfj_pod end
'''
match_indent = true

# The Twins effect
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.GAME.skips = (G.GAME.skips or 0) + 1"
position = "after"
payload = '''
SMODS.calculate_context({mfxfj_pre_skip = true})
'''
match_indent = true



# Unicorn Deck

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if add and not G.GAME.banned_keys[v.key] then "
position = "after"
match_indent = true
payload = '''
    local using_unicorn_deck = (G.GAME.selected_back_key or {}).key == 'b_mxfj_unicorn'

    if using_unicorn_deck and v.key:find('j_mxfj_') then
      for i = 1, 2 do
        _pool[#_pool + 1] = v.key
        _pool_size = _pool_size + 1
      end
    end
'''